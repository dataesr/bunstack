# TODO.
name: Deploy

on:
  push:
    branches:
      # Add the branch name you want to deploy
      - staging
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  GITHUB_REF_NAME: ${{ github.ref_name }}
  URL: ${{ github.repository }}-${{ github.ref_name }}
  PROD: ${{ startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.') }}
  IMAGE_ID: $(echo ghcr.io/${{ github.repository }} | tr '[A-Z]' '[a-z]')

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - run: bun install --frozen-lockfile
      - run: bun run test

  publish-ghcr:
    name: Publish docker image
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log into registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: üêã Build Docker image
        run: docker build -t $IMAGE_ID .

      - name: üêã Push Docker image with ref name
        run: |
          docker build -t $IMAGE_ID .
          docker tag $IMAGE_ID $IMAGE_ID:${{ env.GITHUB_REF_NAME }}
          docker push $IMAGE_ID:${{ env.GITHUB_REF_NAME }}

      - name: üêã Push latest Docker image if prod
        if: ${{ env.PROD }}
        run: |
          docker tag $IMAGE_ID $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  # deploy:
  #   name: Update deployment
  #   runs-on: ubuntu-latest
  #   needs:
  #     - publish-ghcr
  #   steps:
  #     - name: Deploy to Cluster
  #       id: kubectl-deploy
  #       uses: dataesr/kubectl-deploy@v1.1
  #       env:
  #         KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DOAD_STAGING }}
  #       with:
  #         namespace: ${{ env.DEPLOYMENT_NAMESPACE }}
  #         restart: ${{ env.DEPLOYMENT }}

  notify:
    needs:
      - publish-ghcr # Changed from 'deploy' since deploy job is commented out
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: dataesr/mm-notifier-action@v1.0.2
        with:
          deployment_url: ${{ env.URL }}
          github_token: ${{ secrets.GITHUB_TOKEN}}
          mattermost_channel: bots
          mattermost_webhook_url: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
